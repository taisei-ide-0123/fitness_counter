{"ast":null,"code":"var _jsxFileName = \"/Users/idetaisei/dev/fitness_counter/client/src/Profile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = ({\n  store\n}) => {\n  const {\n    isFetching,\n    users\n  } = store.getState().users;\n\n  const handleFetchData = () => {\n    store.dispatch(requestData()); // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n\n    axios.get('/api/characters').then(response => {\n      // データ受け取りに成功した場合\n      const _characterArray = response.data;\n      store.dispatch(receiveDataSuccess(_characterArray)); // データをstoreに保存するとともにisFetchingをfalseに\n    }).catch(err => {\n      // データ受け取りに失敗した場合\n      console.error(new Error(err));\n      store.dispatch(receiveDataFailed()); // isFetchingをfalseに\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isFetching ?\n    /*#__PURE__*/\n    // isFetchingの値で分岐\n    _jsxDEV(\"h2\", {\n      children: \"Now Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this) // データをFetch中ならばローディングアイコンを表示\n    :\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: `${user.name} (${user.age})`\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/idetaisei/dev/fitness_counter/client/src/Profile.js"],"names":["React","Profile","store","isFetching","users","getState","handleFetchData","dispatch","requestData","axios","get","then","response","_characterArray","data","receiveDataSuccess","catch","err","console","error","Error","receiveDataFailed","map","user","name","age","_id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC7B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwBF,KAAK,CAACG,QAAN,GAAiBD,KAA/C;;AAEA,QAAME,eAAe,GAAG,MAAM;AAC5BJ,IAAAA,KAAK,CAACK,QAAN,CAAeC,WAAW,EAA1B,EAD4B,CACE;;AAC9BC,IAAAA,KAAK,CACFC,GADH,CACO,iBADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACA,YAAMC,eAAe,GAAGD,QAAQ,CAACE,IAAjC;AACAZ,MAAAA,KAAK,CAACK,QAAN,CAAeQ,kBAAkB,CAACF,eAAD,CAAjC,EAHkB,CAGkC;AACrD,KANH,EAOGG,KAPH,CAOUC,GAAD,IAAS;AACd;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAc,IAAIC,KAAJ,CAAUH,GAAV,CAAd;AACAf,MAAAA,KAAK,CAACK,QAAN,CAAec,iBAAiB,EAAhC,EAHc,CAGsB;AACrC,KAXH;AAYD,GAdD;;AAgBA,sBACE;AAAA,cACGlB,UAAU;AAAA;AAAK;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADS,CACe;AADf;AAAA;AAGT;AAAA,6BACE;AAAA,kBACGC,KAAK,CAACkB,GAAN,CAAWC,IAAD,iBACT;AAAA,oBAAqB,GAAEA,IAAI,CAACC,IAAK,KAAID,IAAI,CAACE,GAAI;AAA9C,WAASF,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAlCD;;KAAMzB,O;AAoCN,eAAeA,OAAf","sourcesContent":["import React from 'react'\n\nconst Profile = ({ store }) => {\n  const { isFetching, users } = store.getState().users\n\n  const handleFetchData = () => {\n    store.dispatch(requestData()) // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    axios\n      .get('/api/characters')\n      .then((response) => {\n        // データ受け取りに成功した場合\n        const _characterArray = response.data\n        store.dispatch(receiveDataSuccess(_characterArray)) // データをstoreに保存するとともにisFetchingをfalseに\n      })\n      .catch((err) => {\n        // データ受け取りに失敗した場合\n        console.error(new Error(err))\n        store.dispatch(receiveDataFailed()) // isFetchingをfalseに\n      })\n  }\n\n  return (\n    <div>\n      {isFetching ? ( // isFetchingの値で分岐\n        <h2>Now Loading...</h2> // データをFetch中ならばローディングアイコンを表示\n      ) : (\n        <div>\n          <ul>\n            {users.map((user) => (\n              <li key={user._id}>{`${user.name} (${user.age})`}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Profile\n"]},"metadata":{},"sourceType":"module"}
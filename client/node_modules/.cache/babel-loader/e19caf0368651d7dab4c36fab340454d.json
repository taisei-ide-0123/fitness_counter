{"ast":null,"code":"import ml5 from 'ml5';\n\nconst sketch = p => {\n  let video;\n  let poseNet;\n  let plot;\n  let count = 0;\n  let countCanvas;\n  let should_count = true;\n  let noseX = 0;\n  let noseY = 0;\n  let lShoulderX = 0;\n  let lShoulderY = 0;\n  let rShoulderX = 0;\n  let rShoulderY = 0;\n  let lElbowX = 0;\n  let lElbowY = 0;\n  let rElbowX = 0;\n  let rElbowY = 0;\n  let lWristX = 0;\n  let lWristY = 0;\n  let rWristX = 0;\n  let rWristY = 0;\n  let lHipX = 0;\n  let lHipY = 0;\n  let rHipX = 0;\n  let rHipY = 0;\n  let lKneeX = 0;\n  let lKneeY = 0;\n  let rKneeX = 0;\n  let rKneeY = 0;\n  let lAnkleX = 0;\n  let lAnkleY = 0;\n  let rAnkleX = 0;\n  let rAnkleY = 0; // text(s, x, y, w, h)\n  // 最初の1回だけ実装される処理\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    countCanvas = p.createGraphics(p.windowWidth, p.windowHeight * 0.1);\n    video = p.createCapture(p.VIDEO);\n    video.size(p.windowWidth, p.windowHeight);\n    video.hide(); // 映像を一つにする\n\n    poseNet = ml5.poseNet(video, p.modelReady);\n    poseNet.on('pose', p.gotPoses); // ポーズが検出された時に結果を返すイベント\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  };\n\n  p.gotPoses = poses => {\n    // console.log(poses)\n    if (poses.length > 0) {\n      let nX = poses[0].pose.keypoints[0].position.x;\n      let nY = poses[0].pose.keypoints[0].position.y;\n      let leftShoulderX = poses[0].pose.keypoints[5].position.x;\n      let leftShoulderY = poses[0].pose.keypoints[5].position.y;\n      let rightShoulderX = poses[0].pose.keypoints[6].position.x;\n      let rightShoulderY = poses[0].pose.keypoints[6].position.y;\n      let leftElbowX = poses[0].pose.keypoints[7].position.x;\n      let leftElbowY = poses[0].pose.keypoints[7].position.y;\n      let rightElbowX = poses[0].pose.keypoints[8].position.x;\n      let rightElbowY = poses[0].pose.keypoints[8].position.y;\n      let leftWristX = poses[0].pose.keypoints[9].position.x;\n      let leftWristY = poses[0].pose.keypoints[9].position.y;\n      let rightWristX = poses[0].pose.keypoints[10].position.x;\n      let rightWristY = poses[0].pose.keypoints[10].position.y;\n      let leftHipX = poses[0].pose.keypoints[11].position.x;\n      let leftHipY = poses[0].pose.keypoints[11].position.y;\n      let rightHipX = poses[0].pose.keypoints[12].position.x;\n      let rightHipY = poses[0].pose.keypoints[12].position.y;\n      let leftKneeX = poses[0].pose.keypoints[13].position.x;\n      let leftKneeY = poses[0].pose.keypoints[13].position.y;\n      let rightKneeX = poses[0].pose.keypoints[14].position.x;\n      let rightKneeY = poses[0].pose.keypoints[14].position.y;\n      let leftAnkleX = poses[0].pose.keypoints[15].position.x;\n      let leftAnkleY = poses[0].pose.keypoints[15].position.y;\n      let rightAnkleX = poses[0].pose.keypoints[16].position.x;\n      let rightAnkleY = poses[0].pose.keypoints[16].position.y;\n      noseX = p.lerp(noseX, nX, 0.5);\n      noseY = p.lerp(noseY, nY, 0.5);\n      lShoulderX = p.lerp(lShoulderX, leftShoulderX, 0.5);\n      lShoulderY = p.lerp(lShoulderY, leftShoulderY, 0.5);\n      rShoulderX = p.lerp(rShoulderX, rightShoulderX, 0.5);\n      rShoulderY = p.lerp(rShoulderY, rightShoulderY, 0.5);\n      lElbowX = p.lerp(lElbowX, leftElbowX, 0.5);\n      lElbowY = p.lerp(lElbowY, leftElbowY, 0.5);\n      rElbowX = p.lerp(rElbowX, rightElbowX, 0.5);\n      rElbowY = p.lerp(rElbowY, rightElbowY, 0.5);\n      lWristX = p.lerp(lWristX, leftWristX, 0.5);\n      lWristY = p.lerp(lWristY, leftWristY, 0.5);\n      rWristX = p.lerp(rWristX, rightWristX, 0.5);\n      rWristY = p.lerp(rWristY, rightWristY, 0.5);\n      lHipX = p.lerp(lHipX, leftHipX, 0.5);\n      lHipY = p.lerp(lHipY, leftHipY, 0.5);\n      rHipX = p.lerp(rHipX, rightHipX, 0.5);\n      rHipY = p.lerp(rHipY, rightHipY, 0.5);\n      lKneeX = p.lerp(lKneeX, leftKneeX, 0.5);\n      lKneeY = p.lerp(lKneeY, leftKneeY, 0.5);\n      rKneeX = p.lerp(rKneeX, rightKneeX, 0.5);\n      rKneeY = p.lerp(rKneeY, rightKneeY, 0.5);\n      lAnkleX = p.lerp(lAnkleX, leftAnkleX, 0.5);\n      lAnkleY = p.lerp(lAnkleY, leftAnkleY, 0.5);\n      rAnkleX = p.lerp(rAnkleX, rightAnkleX, 0.5);\n      rAnkleY = p.lerp(rAnkleY, rightAnkleY, 0.5); // console.log(nY)\n      // 座標\n      // (lHipX, lHipY)\n      // (lKneeX, lKneeY)\n      // (lAnkleX, lAnkleY)\n\n      var ba = new Array(2);\n      ba[0] = leftHipX - leftKneeX;\n      ba[1] = leftHipY - leftKneeY;\n      var bc = new Array(2);\n      bc[0] = leftAnkleX - leftKneeX;\n      bc[1] = leftAnkleY - leftKneeY;\n      var babc = ba[0] * bc[0] + ba[1] * bc[1];\n      var ban = ba[0] * ba[0] + ba[1] * ba[1];\n      var bcn = bc[0] * bc[0] + bc[1] * bc[1];\n      var radian = Math.acos(babc / Math.sqrt(ban * bcn));\n      var angle = radian * 180 / Math.PI; // 結果（ラジアンから角度に変換）\n\n      console.log(angle);\n\n      if (nY <= 350) {\n        should_count = true;\n      } else if (nY >= 370 && should_count) {\n        count += 1;\n        should_count = false;\n      }\n    }\n  };\n\n  p.modelReady = () => {// console.log('model ready')\n  }; // setup後に繰り返し実行される処理（フレーム単位）\n\n\n  p.draw = () => {\n    p.background(220); // カメラからの映像は一旦getしてイメージとして扱う方が軽量\n\n    let img = video.get();\n    p.image(img, 0, 0, p.width, p.height);\n    p.fill(245, 222, 179);\n    p.ellipse(noseX, noseY, 20);\n    p.ellipse(lShoulderX, lShoulderY, 20);\n    p.ellipse(rShoulderX, rShoulderY, 20);\n    p.ellipse(lElbowX, lElbowY, 20);\n    p.ellipse(rElbowX, rElbowY, 20);\n    p.ellipse(lWristX, lWristY, 20);\n    p.ellipse(rWristX, rWristY, 20);\n    p.ellipse(lHipX, lHipY, 20);\n    p.ellipse(rHipX, rHipY, 20);\n    p.ellipse(lKneeX, lKneeY, 20);\n    p.ellipse(rKneeX, rKneeY, 20);\n    p.ellipse(lAnkleX, lAnkleY, 20);\n    p.ellipse(rAnkleX, rAnkleY, 20);\n    p.strokeWeight(5);\n    p.stroke(255, 127, 80);\n    p.line(lShoulderX, lShoulderY, rShoulderX, rShoulderY);\n    p.line(lShoulderX, lShoulderY, lElbowX, lElbowY);\n    p.line(lElbowX, lElbowY, lWristX, lWristY);\n    p.line(rShoulderX, rShoulderY, rElbowX, rElbowY);\n    p.line(rElbowX, rElbowY, rWristX, rWristY);\n    p.line(lShoulderX, lShoulderY, lHipX, lHipY);\n    p.line(lHipX, lHipY, lKneeX, lKneeY);\n    p.line(lKneeX, lKneeY, lAnkleX, lAnkleY);\n    p.line(rShoulderX, rShoulderY, rHipX, rHipY);\n    p.line(rHipX, rHipY, rKneeX, rKneeY);\n    p.line(rKneeX, rKneeY, rAnkleX, rAnkleY);\n    p.line(lHipX, lHipY, rHipX, rHipY);\n    p.line(0, 350, p.width, 350); // header\n\n    countCanvas.background(0);\n    countCanvas.noStroke();\n    p.image(countCanvas, 0, 0); // count\n\n    p.fill(255, 127, 80);\n    p.stroke(255, 127, 80);\n    p.text('count : ' + count, 50, 60);\n    p.textSize(60);\n  };\n};\n\nexport default sketch;","map":{"version":3,"sources":["/Users/idetaisei/dev/fitness_counter/client/src/sketches/Squat.js"],"names":["ml5","sketch","p","video","poseNet","plot","count","countCanvas","should_count","noseX","noseY","lShoulderX","lShoulderY","rShoulderX","rShoulderY","lElbowX","lElbowY","rElbowX","rElbowY","lWristX","lWristY","rWristX","rWristY","lHipX","lHipY","rHipX","rHipY","lKneeX","lKneeY","rKneeX","rKneeY","lAnkleX","lAnkleY","rAnkleX","rAnkleY","setup","createCanvas","windowWidth","windowHeight","createGraphics","createCapture","VIDEO","size","hide","modelReady","on","gotPoses","windowResized","resizeCanvas","poses","length","nX","pose","keypoints","position","x","nY","y","leftShoulderX","leftShoulderY","rightShoulderX","rightShoulderY","leftElbowX","leftElbowY","rightElbowX","rightElbowY","leftWristX","leftWristY","rightWristX","rightWristY","leftHipX","leftHipY","rightHipX","rightHipY","leftKneeX","leftKneeY","rightKneeX","rightKneeY","leftAnkleX","leftAnkleY","rightAnkleX","rightAnkleY","lerp","ba","Array","bc","babc","ban","bcn","radian","Math","acos","sqrt","angle","PI","console","log","draw","background","img","get","image","width","height","fill","ellipse","strokeWeight","stroke","line","noStroke","text","textSize"],"mappings":"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","sourcesContent":["import ml5 from 'ml5'\n\nconst sketch = (p) => {\n  let video\n  let poseNet\n  let plot\n  let count = 0\n  let countCanvas\n  let should_count = true\n  let noseX = 0\n  let noseY = 0\n  let lShoulderX = 0\n  let lShoulderY = 0\n  let rShoulderX = 0\n  let rShoulderY = 0\n  let lElbowX = 0\n  let lElbowY = 0\n  let rElbowX = 0\n  let rElbowY = 0\n  let lWristX = 0\n  let lWristY = 0\n  let rWristX = 0\n  let rWristY = 0\n  let lHipX = 0\n  let lHipY = 0\n  let rHipX = 0\n  let rHipY = 0\n  let lKneeX = 0\n  let lKneeY = 0\n  let rKneeX = 0\n  let rKneeY = 0\n  let lAnkleX = 0\n  let lAnkleY = 0\n  let rAnkleX = 0\n  let rAnkleY = 0\n\n  // text(s, x, y, w, h)\n\n  // 最初の1回だけ実装される処理\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight)\n    countCanvas = p.createGraphics(p.windowWidth, p.windowHeight * 0.1)\n    video = p.createCapture(p.VIDEO)\n    video.size(p.windowWidth, p.windowHeight)\n    video.hide() // 映像を一つにする\n    poseNet = ml5.poseNet(video, p.modelReady)\n    poseNet.on('pose', p.gotPoses) // ポーズが検出された時に結果を返すイベント\n  }\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight)\n  }\n\n  p.gotPoses = (poses) => {\n    // console.log(poses)\n    if (poses.length > 0) {\n      let nX = poses[0].pose.keypoints[0].position.x\n      let nY = poses[0].pose.keypoints[0].position.y\n      let leftShoulderX = poses[0].pose.keypoints[5].position.x\n      let leftShoulderY = poses[0].pose.keypoints[5].position.y\n      let rightShoulderX = poses[0].pose.keypoints[6].position.x\n      let rightShoulderY = poses[0].pose.keypoints[6].position.y\n      let leftElbowX = poses[0].pose.keypoints[7].position.x\n      let leftElbowY = poses[0].pose.keypoints[7].position.y\n      let rightElbowX = poses[0].pose.keypoints[8].position.x\n      let rightElbowY = poses[0].pose.keypoints[8].position.y\n      let leftWristX = poses[0].pose.keypoints[9].position.x\n      let leftWristY = poses[0].pose.keypoints[9].position.y\n      let rightWristX = poses[0].pose.keypoints[10].position.x\n      let rightWristY = poses[0].pose.keypoints[10].position.y\n      let leftHipX = poses[0].pose.keypoints[11].position.x\n      let leftHipY = poses[0].pose.keypoints[11].position.y\n      let rightHipX = poses[0].pose.keypoints[12].position.x\n      let rightHipY = poses[0].pose.keypoints[12].position.y\n      let leftKneeX = poses[0].pose.keypoints[13].position.x\n      let leftKneeY = poses[0].pose.keypoints[13].position.y\n      let rightKneeX = poses[0].pose.keypoints[14].position.x\n      let rightKneeY = poses[0].pose.keypoints[14].position.y\n      let leftAnkleX = poses[0].pose.keypoints[15].position.x\n      let leftAnkleY = poses[0].pose.keypoints[15].position.y\n      let rightAnkleX = poses[0].pose.keypoints[16].position.x\n      let rightAnkleY = poses[0].pose.keypoints[16].position.y\n\n      noseX = p.lerp(noseX, nX, 0.5)\n      noseY = p.lerp(noseY, nY, 0.5)\n      lShoulderX = p.lerp(lShoulderX, leftShoulderX, 0.5)\n      lShoulderY = p.lerp(lShoulderY, leftShoulderY, 0.5)\n      rShoulderX = p.lerp(rShoulderX, rightShoulderX, 0.5)\n      rShoulderY = p.lerp(rShoulderY, rightShoulderY, 0.5)\n      lElbowX = p.lerp(lElbowX, leftElbowX, 0.5)\n      lElbowY = p.lerp(lElbowY, leftElbowY, 0.5)\n      rElbowX = p.lerp(rElbowX, rightElbowX, 0.5)\n      rElbowY = p.lerp(rElbowY, rightElbowY, 0.5)\n      lWristX = p.lerp(lWristX, leftWristX, 0.5)\n      lWristY = p.lerp(lWristY, leftWristY, 0.5)\n      rWristX = p.lerp(rWristX, rightWristX, 0.5)\n      rWristY = p.lerp(rWristY, rightWristY, 0.5)\n      lHipX = p.lerp(lHipX, leftHipX, 0.5)\n      lHipY = p.lerp(lHipY, leftHipY, 0.5)\n      rHipX = p.lerp(rHipX, rightHipX, 0.5)\n      rHipY = p.lerp(rHipY, rightHipY, 0.5)\n      lKneeX = p.lerp(lKneeX, leftKneeX, 0.5)\n      lKneeY = p.lerp(lKneeY, leftKneeY, 0.5)\n      rKneeX = p.lerp(rKneeX, rightKneeX, 0.5)\n      rKneeY = p.lerp(rKneeY, rightKneeY, 0.5)\n      lAnkleX = p.lerp(lAnkleX, leftAnkleX, 0.5)\n      lAnkleY = p.lerp(lAnkleY, leftAnkleY, 0.5)\n      rAnkleX = p.lerp(rAnkleX, rightAnkleX, 0.5)\n      rAnkleY = p.lerp(rAnkleY, rightAnkleY, 0.5)\n\n      // console.log(nY)\n      // 座標\n      // (lHipX, lHipY)\n      // (lKneeX, lKneeY)\n      // (lAnkleX, lAnkleY)\n\n      var ba = new Array(2)\n      ba[0] = leftHipX - leftKneeX\n      ba[1] = leftHipY - leftKneeY\n      var bc = new Array(2)\n      bc[0] = leftAnkleX - leftKneeX\n      bc[1] = leftAnkleY - leftKneeY\n\n      var babc = ba[0] * bc[0] + ba[1] * bc[1]\n      var ban = ba[0] * ba[0] + ba[1] * ba[1]\n      var bcn = bc[0] * bc[0] + bc[1] * bc[1]\n      var radian = Math.acos(babc / Math.sqrt(ban * bcn))\n      var angle = (radian * 180) / Math.PI // 結果（ラジアンから角度に変換）\n\n      console.log(angle)\n      if (nY <= 350) {\n        should_count = true\n      } else if (nY >= 370 && should_count) {\n        count += 1\n        should_count = false\n      }\n    }\n  }\n\n  p.modelReady = () => {\n    // console.log('model ready')\n  }\n\n  // setup後に繰り返し実行される処理（フレーム単位）\n  p.draw = () => {\n    p.background(220)\n\n    // カメラからの映像は一旦getしてイメージとして扱う方が軽量\n    let img = video.get()\n    p.image(img, 0, 0, p.width, p.height)\n\n    p.fill(245, 222, 179)\n    p.ellipse(noseX, noseY, 20)\n    p.ellipse(lShoulderX, lShoulderY, 20)\n    p.ellipse(rShoulderX, rShoulderY, 20)\n    p.ellipse(lElbowX, lElbowY, 20)\n    p.ellipse(rElbowX, rElbowY, 20)\n    p.ellipse(lWristX, lWristY, 20)\n    p.ellipse(rWristX, rWristY, 20)\n    p.ellipse(lHipX, lHipY, 20)\n    p.ellipse(rHipX, rHipY, 20)\n    p.ellipse(lKneeX, lKneeY, 20)\n    p.ellipse(rKneeX, rKneeY, 20)\n    p.ellipse(lAnkleX, lAnkleY, 20)\n    p.ellipse(rAnkleX, rAnkleY, 20)\n\n    p.strokeWeight(5)\n    p.stroke(255, 127, 80)\n    p.line(lShoulderX, lShoulderY, rShoulderX, rShoulderY)\n    p.line(lShoulderX, lShoulderY, lElbowX, lElbowY)\n    p.line(lElbowX, lElbowY, lWristX, lWristY)\n    p.line(rShoulderX, rShoulderY, rElbowX, rElbowY)\n    p.line(rElbowX, rElbowY, rWristX, rWristY)\n    p.line(lShoulderX, lShoulderY, lHipX, lHipY)\n    p.line(lHipX, lHipY, lKneeX, lKneeY)\n    p.line(lKneeX, lKneeY, lAnkleX, lAnkleY)\n    p.line(rShoulderX, rShoulderY, rHipX, rHipY)\n    p.line(rHipX, rHipY, rKneeX, rKneeY)\n    p.line(rKneeX, rKneeY, rAnkleX, rAnkleY)\n    p.line(lHipX, lHipY, rHipX, rHipY)\n\n    p.line(0, 350, p.width, 350)\n\n    // header\n    countCanvas.background(0)\n    countCanvas.noStroke()\n    p.image(countCanvas, 0, 0)\n\n    // count\n    p.fill(255, 127, 80)\n    p.stroke(255, 127, 80)\n    p.text('count : ' + count, 50, 60)\n    p.textSize(60)\n  }\n}\n\nexport default sketch\n"]},"metadata":{},"sourceType":"module"}